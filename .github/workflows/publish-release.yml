name: Release binaries
permissions: {}

on:
  push:
    tags:
      - "v*"

jobs:
  compile-gui:
    # Compile the GUI on Windows & Linux, and write the GUI binaries to actions/cache
    name: Compile GUI
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    runs-on: ${{ matrix.os }}

    permissions:
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          persist-credentials: false

      - name: Set Version
        id: get_version
        shell: bash
        # Use GITHUB_OUTPUT for setting output variables
        run: echo "VERSION=${GITHUB_REF_NAME#v}" >> $GITHUB_OUTPUT
        env:
          GITHUB_REF_NAME: ${{ github.ref_name }}

      - name: Install Python
        uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c # v5
        with:
          python-version: "3.12"

      - name: Install poetry
        uses: abatilo/actions-poetry@0dd19c9498c3dc8728967849d0d2eae428a8a3d8 # v4
      
      - name: Setup a local virtual environment
        run: |
          poetry config virtualenvs.create true --local
          poetry config virtualenvs.in-project true --local

      - name: Install the project dependencies
        run: |
          poetry install --no-root --with dev
          pip3 install pyside6==6.9.1 pyinstaller==6.14.0 --ignore-installed

      - name: Install libxcb-cursor0 # Needed for PySide6 on some Linux runners
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |-
          sudo apt-get update
          sudo apt-get install -y libxcb-cursor0

      - name: Compile GUI
        shell: bash
        run: |
          ./create_gui.sh
          mv dist/cloudfuse-gui dist/cloudfuse-gui_${{ runner.os }}

      - name: Cache compiled GUI
        uses: actions/cache/save@0057852bfaa89a56745cba8c7296529d2fc39830 # v4
        with:
          enableCrossOsArchive: true
          path: dist/cloudfuse-gui_${{ runner.os }}
          # Use a consistent, specific key including spec and requirements
          key: ${{ runner.os }}-compiled-gui-${{ steps.get_version.outputs.VERSION }}-${{ github.sha }}

  create-installer:
    # Run Inno Setup to create the Windows app installer, then write it to actions/cache
    name: Create Windows Installer
    needs: compile-gui
    runs-on: windows-latest
    env:
      winfsp: winfsp-2.1.25156.msi
    permissions:
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          persist-credentials: false

      - name: Set Version
        id: get_version
        shell: bash
        # Use GITHUB_OUTPUT for setting output variables
        run: echo "VERSION=${GITHUB_REF_NAME#v}" >> $GITHUB_OUTPUT
        env:
          GITHUB_REF_NAME: ${{ github.ref_name }}

        # Get the WinFSP installer (from cache or download)
      - name: Get cached WinFSP installer
        id: restore-winfsp-installer
        uses: actions/cache/restore@0057852bfaa89a56745cba8c7296529d2fc39830 # v4
        with:
          path: ${{ env.winfsp }}
          key: ${{ env.winfsp }}

      - name: Download WinFSP installer
        if: ${{ ! steps.restore-winfsp-installer.outputs.cache-hit }}
        shell: bash
        run: |
          curl -LOf https://github.com/winfsp/winfsp/releases/download/v2.1/${{ env.winfsp }}

      - name: Cache WinFSP installer
        if: ${{ ! steps.restore-winfsp-installer.outputs.cache-hit }}
        uses: actions/cache/save@0057852bfaa89a56745cba8c7296529d2fc39830 # v4
        with:
          path: ${{ env.winfsp }}
          key: ${{ env.winfsp }}

      - name: Fetch cached compiled GUI
        uses: actions/cache/restore@0057852bfaa89a56745cba8c7296529d2fc39830 # v4
        with:
          enableCrossOsArchive: true
          path: dist/cloudfuse-gui_${{ runner.os }}
          # Use the same key as the save step in compile-gui
          key: ${{ runner.os }}-compiled-gui-${{ steps.get_version.outputs.VERSION }}-${{ github.sha }}
          fail-on-cache-miss: true
        # don't continue if we fail get the compiled GUI for the Windows installer
        continue-on-error: false

      - name: Run Inno Setup
        # Build the installer and save it to actions/cache
        working-directory: ./windows
        shell: bash
        # Inno Setup is pre-installed on GitHub's windows-latest image
        # see documentation: https://github.com/actions/runner-images/blob/main/images/windows/Windows2022-Readme.md
        run: |
          # Pass version to Inno Setup via command line define
          "C:/Program Files (x86)/Inno Setup 6/iscc.exe" //DAppVersion=${{ steps.get_version.outputs.VERSION }} windows_installer_build.iss

      - name: Rename installer
        shell: bash
        run: |
          mv windows/Output/cloudfuse-gui.exe windows/Output/cloudfuse-gui_${{ steps.get_version.outputs.VERSION }}_windows_amd64.exe

      - name: Cache windows installer
        uses: actions/cache/save@0057852bfaa89a56745cba8c7296529d2fc39830 # v4
        with:
          enableCrossOsArchive: true
          path: windows/Output/cloudfuse-gui_${{ steps.get_version.outputs.VERSION }}_windows_amd64.exe
          key: windows-cloudfuse-installer-${{ steps.get_version.outputs.VERSION }}-${{ github.sha }}

  release:
    # Package and publish GUI builds, Windows installer, Deb and RPM packages
    name: Release Binaries
    needs: [compile-gui, create-installer]
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          persist-credentials: false

      - name: Set Version
        id: get_version
        run: echo "VERSION=${GITHUB_REF_NAME#v}" >> $GITHUB_OUTPUT
        env:
          GITHUB_REF_NAME: ${{ github.ref_name }}

      - name: Restore Linux compiled GUI
        uses: actions/cache/restore@0057852bfaa89a56745cba8c7296529d2fc39830 # v4
        with:
          path: dist/cloudfuse-gui_Linux
          key: Linux-compiled-gui-${{ steps.get_version.outputs.VERSION }}-${{ github.sha }}
          fail-on-cache-miss: true

      - name: Restore Windows compiled GUI
        uses: actions/cache/restore@0057852bfaa89a56745cba8c7296529d2fc39830 # v4
        with:
          enableCrossOsArchive: true
          path: dist/cloudfuse-gui_Windows
          key: Windows-compiled-gui-${{ steps.get_version.outputs.VERSION }}-${{ github.sha }}
          fail-on-cache-miss: true

      - name: Restore Windows Installer
        id: restore-installer
        uses: actions/cache/restore@0057852bfaa89a56745cba8c7296529d2fc39830 # v4
        with:
          enableCrossOsArchive: true
          path: windows/Output/cloudfuse-gui_${{ steps.get_version.outputs.VERSION }}_windows_amd64.exe
          key: windows-cloudfuse-installer-${{ steps.get_version.outputs.VERSION }}-${{ github.sha }}
          fail-on-cache-miss: true

      - name: Install Packaging Tools
        run: |
          sudo apt-get update
          sudo apt-get install -y zip dpkg-dev rpm fakeroot binutils

      - name: Define Asset Names
        id: assets
        shell: bash
        run: |
          VERSION=${{ steps.get_version.outputs.VERSION }}
          ARCH=$(dpkg --print-architecture)
          echo "LINUX_GUI_ZIP=cloudfuse-gui_${VERSION}_linux_amd64.zip" >> $GITHUB_OUTPUT
          echo "WINDOWS_GUI_ZIP=cloudfuse-gui_${VERSION}_windows_amd64.zip" >> $GITHUB_OUTPUT
          echo "WINDOWS_INSTALLER=windows/Output/cloudfuse-gui_${VERSION}_windows_amd64.exe" >> $GITHUB_OUTPUT
          echo "DEB_PACKAGE=cloudfuse-gui_${VERSION}_${ARCH}.deb" >> $GITHUB_OUTPUT
          echo "RPM_PACKAGE=cloudfuse-gui-${VERSION}-${ARCH}.rpm" >> $GITHUB_OUTPUT
          echo "HASH_FILE=sha256sums.txt" >> $GITHUB_OUTPUT

      - name: Zip Linux GUI artifact
        run: |
          zip -r ${{ steps.assets.outputs.LINUX_GUI_ZIP }} dist/cloudfuse-gui_Linux

      - name: Zip Windows GUI artifact
        run: |
          zip -r ${{ steps.assets.outputs.WINDOWS_GUI_ZIP }} dist/cloudfuse-gui_Windows

      - name: Prepare DEB and RPM package
        run: |
          ./build_packages.sh ${{ steps.get_version.outputs.VERSION }} dist/cloudfuse-gui_Linux
      
      - name: Calculate Hashes
        shell: bash
        run: |
          sha256sum ${{ steps.assets.outputs.LINUX_GUI_ZIP }} > ${{ steps.assets.outputs.HASH_FILE }}
          sha256sum ${{ steps.assets.outputs.WINDOWS_GUI_ZIP }} >> ${{ steps.assets.outputs.HASH_FILE }}
          sha256sum ${{ steps.assets.outputs.DEB_PACKAGE }} >> ${{ steps.assets.outputs.HASH_FILE }}
          sha256sum ${{ steps.assets.outputs.RPM_PACKAGE }} >> ${{ steps.assets.outputs.HASH_FILE }}

      - name: Create GitHub Release and Upload Assets
        uses: softprops/action-gh-release@6cbd405e2c4e67a21c47fa9e383d020e4e28b836 # v2
        with:
          files: |
            ${{ steps.assets.outputs.LINUX_GUI_ZIP }}
            ${{ steps.assets.outputs.WINDOWS_GUI_ZIP }}
            ${{ steps.assets.outputs.WINDOWS_INSTALLER }}
            ${{ steps.assets.outputs.DEB_PACKAGE }}
            ${{ steps.assets.outputs.RPM_PACKAGE }}
            ${{ steps.assets.outputs.HASH_FILE }}
          fail_on_unmatched_files: true

  update-package-repos:
    name: Update APT & RPM Repositories
    needs: release
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y createrepo-c

      - name: Checkout gh-pages branch
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          ref: gh-pages
          path: gh-pages
          persist-credentials: true

      - name: Download .deb and .rpm packages from release
        env:
          GH_TOKEN: ${{ github.token }}
          TAG: ${{ github.ref_name }}
        run: |
          mkdir ./packages
          gh release download "$TAG" --repo "${{ github.repository }}" --dir ./packages -p "*.deb"
          gh release download "$TAG" --repo "${{ github.repository }}" --dir ./packages -p "*.rpm"

      - name: Import GPG key
        id: import_gpg
        uses: crazy-max/ghaction-import-gpg@e89d40939c28e39f97cf32126055eeae86ba74ec # v6.3.0
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}
          
      - name: Update APT repository
        working-directory: ./gh-pages
        run: |
          set -euo pipefail
          # Move new .deb files into the repository
          find ../packages -name "*_amd64.deb" -exec mv {} dists/stable/main/binary-amd64/ \;
          # Generate Packages metadata
          apt-ftparchive packages dists/stable/main/binary-amd64 > dists/stable/main/binary-amd64/Packages
          gzip -k -f dists/stable/main/binary-amd64/Packages
          # Generate Release file
          apt-ftparchive \
            -o APT::FTPArchive::Release::Origin="Seagate Technology" \
            -o APT::FTPArchive::Release::Label="cloudfuse-gui" \
            -o APT::FTPArchive::Release::Suite="stable" \
            -o APT::FTPArchive::Release::Codename="stable" \
            -o APT::FTPArchive::Release::Architectures="amd64" \
            -o APT::FTPArchive::Release::Components="main" \
            -o APT::FTPArchive::Release::Description="APT repository for cloudfuse-gui" \
            release dists/stable > dists/stable/Release
          # Remove old signatures to avoid "File exists"
          rm -f dists/stable/InRelease dists/stable/Release.gpg
          # Sign the Release file
          gpg --yes --clearsign -u "${{ steps.import_gpg.outputs.fingerprint }}" --batch --pinentry-mode loopback --passphrase "${{ secrets.GPG_PASSPHRASE }}" -o dists/stable/InRelease dists/stable/Release
          gpg --yes -u "${{ steps.import_gpg.outputs.fingerprint }}" --batch --pinentry-mode loopback --passphrase "${{ secrets.GPG_PASSPHRASE }}" -abs -o dists/stable/Release.gpg dists/stable/Release

      - name: Update RPM repository
        working-directory: ./gh-pages
        run: |
          set -euo pipefail
          # Move new .rpm files
          find ../packages -name "*.rpm" -exec mv {} rpm-repo/ \;
          # Create/update repository metadata
          createrepo_c --database rpm-repo/
          # Remove old signatures to avoid "File exists"
          rm -f rpm-repo/repodata/repomd.xml.asc rpm-repo/repodata/repomd.xml.gpg
          # Sign the repository metadata (detached armored signature)
          gpg --batch --yes --pinentry-mode loopback --passphrase "${{ secrets.GPG_PASSPHRASE }}" \
             -u "${{ steps.import_gpg.outputs.fingerprint }}" \
             --detach-sign --armor \
             -o rpm-repo/repodata/repomd.xml.asc \
             rpm-repo/repodata/repomd.xml

      - name: Commit and push repository updates
        working-directory: ./gh-pages
        env:
          GITHUB_REF_NAME: ${{ github.ref_name }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add .
          if git diff-index --quiet HEAD; then
            echo "No changes to commit."
          else
            git commit -m "Update APT & RPM repositories for release ${GITHUB_REF_NAME}"
            git push
          fi